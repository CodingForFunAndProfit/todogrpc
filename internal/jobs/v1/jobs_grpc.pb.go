// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package jobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoSvcClient is the client API for TodoSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoSvcClient interface {
	Add(ctx context.Context, in *Todos, opts ...grpc.CallOption) (*Response, error)
	Completed(ctx context.Context, in *CompletedRequest, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Todos, error)
}

type todoSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoSvcClient(cc grpc.ClientConnInterface) TodoSvcClient {
	return &todoSvcClient{cc}
}

func (c *todoSvcClient) Add(ctx context.Context, in *Todos, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/jobs.TodoSvc/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) Completed(ctx context.Context, in *CompletedRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/jobs.TodoSvc/Completed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSvcClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Todos, error) {
	out := new(Todos)
	err := c.cc.Invoke(ctx, "/jobs.TodoSvc/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoSvcServer is the server API for TodoSvc service.
// All implementations must embed UnimplementedTodoSvcServer
// for forward compatibility
type TodoSvcServer interface {
	Add(context.Context, *Todos) (*Response, error)
	Completed(context.Context, *CompletedRequest) (*Response, error)
	List(context.Context, *Empty) (*Todos, error)
	mustEmbedUnimplementedTodoSvcServer()
}

// UnimplementedTodoSvcServer must be embedded to have forward compatible implementations.
type UnimplementedTodoSvcServer struct {
}

func (UnimplementedTodoSvcServer) Add(context.Context, *Todos) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTodoSvcServer) Completed(context.Context, *CompletedRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Completed not implemented")
}
func (UnimplementedTodoSvcServer) List(context.Context, *Empty) (*Todos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTodoSvcServer) mustEmbedUnimplementedTodoSvcServer() {}

// UnsafeTodoSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoSvcServer will
// result in compilation errors.
type UnsafeTodoSvcServer interface {
	mustEmbedUnimplementedTodoSvcServer()
}

func RegisterTodoSvcServer(s grpc.ServiceRegistrar, srv TodoSvcServer) {
	s.RegisterService(&TodoSvc_ServiceDesc, srv)
}

func _TodoSvc_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobs.TodoSvc/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).Add(ctx, req.(*Todos))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_Completed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).Completed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobs.TodoSvc/Completed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).Completed(ctx, req.(*CompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSvc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSvcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobs.TodoSvc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSvcServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoSvc_ServiceDesc is the grpc.ServiceDesc for TodoSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobs.TodoSvc",
	HandlerType: (*TodoSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _TodoSvc_Add_Handler,
		},
		{
			MethodName: "Completed",
			Handler:    _TodoSvc_Completed_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TodoSvc_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/jobs/v1/jobs.proto",
}
